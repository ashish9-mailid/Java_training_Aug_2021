
	Basic coding skills -- C -- 

1.  PI
2. OOP
3. Robust -- Exceptions -- Errors during runtime
4. Security
5. Distributed Applications  -- Eg : Web applications, REST API, 
6. Multithreaded 
7  API -- Libraries , Framework

Coding conventions/ Standards

	java HelloWorld --  HelloWorld.main

static methods are called with the class names / objects not required

 shift+ctrl+/ - to comment \ to uncomment


package -- class organization / avoids name clashing

com.training.classes -- A  -- (fully qualified name ) -- com.training.classes.A

			com
			someclass

	training
		report

	classes

	A B

java.util
java.lang (default)
java.sql 
java.net 
java.io

	class -- Customer

	getCustName() -- instance

	custId -- instance 

	countOfCustomers -- static

	getCountOfCustomers() -- static

	getCustPoints() -- instance

	getShopAddress() -- static
	
	getPrimeNumbers() -- static 


	OOP -- Inheritance -- is a Relation  -- reusability/extendibility

	eg: User      Customer is a User  
	class Customer extends User

	Account has Customer        Customer  has an account 

	User -- (id,name)

	Customer -- (custId,emailid)

 Object class is the super class for all the classes.

hashcode -- hexadecimal code for every java object

Overriding -- Redefining an existing method of the base class inside the child class.

public String toString() --

	User -- abc()

	Customer -- abc()

	public class Th1 extends JFrame
	{


	}

private members are not inherited.
constructors are not inherited
static members are not inherited

protected members are inherited but they are not accessible in non child classes.
public members are accessible anywhere in the project with objects.

super() 

Day 2: 05/08/2021

Method Overloading

	methods having same name with different signatures (arg list and sequence)
	in the same class or in the child class.
	

polymorphism - many forms
	1. compile time eg: method overloading - static polymorphism

Overriding 
1. Only in the child class.
2.  same prototype - return type + method name+ signature
3.  cannot be Restrictive 
	public -- public
	protected -- public, protected
	default -- public in the same package

4.  Default methods cannot be OR in a different package
5. Static methods do not participate in OR.


		class Payment{
		public void makePayment(){ }

		}



8.	An Online Store has offers for different types of users. User can be a registered customer, Employee of the Store or a Student.
a.	giveOffers() is a common functionality that gives 10% discount to all Customers , 100 reward points to Employees and 20% discount to all Students.
b.	User has name. Customer has Email.Employee has empCode  and Student has regNo.

c.	Create a Utility Class that calls giveOffers based on the type of User and also prints all the details of User.


	public static void testOffers(User user)
	{
		user.giveOffers(); // runtime
	}

Dynamic binding / late binding / runtime polymorhism

abstract classes
1. 1 or more abstract methods ( declaration) with no implementation.
2. Cannot be instantiated

	User user = new User(); //error
3. Used for Dynamic Binding.
4. Extendibility
5. enforce overriding






