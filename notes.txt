
	Basic coding skills -- C -- 

1.  PI
2. OOP
3. Robust -- Exceptions -- Errors during runtime
4. Security
5. Distributed Applications  -- Eg : Web applications, REST API, 
6. Multithreaded 
7  API -- Libraries , Framework

Coding conventions/ Standards

	java HelloWorld --  HelloWorld.main

static methods are called with the class names / objects not required

 shift+ctrl+/ - to comment \ to uncomment


package -- class organization / avoids name clashing

com.training.classes -- A  -- (fully qualified name ) -- com.training.classes.A

			com
			someclass

	training
		report

	classes

	A B

java.util
java.lang (default)
java.sql 
java.net 
java.io

	class -- Customer

	getCustName() -- instance

	custId -- instance 

	countOfCustomers -- static

	getCountOfCustomers() -- static

	getCustPoints() -- instance

	getShopAddress() -- static
	
	getPrimeNumbers() -- static 


	OOP -- Inheritance -- is a Relation  -- reusability/extendibility

	eg: User      Customer is a User  
	class Customer extends User

	Account has Customer        Customer  has an account 

	User -- (id,name)

	Customer -- (custId,emailid)

 Object class is the super class for all the classes.

hashcode -- hexadecimal code for every java object

Overriding -- Redefining an existing method of the base class inside the child class.

public String toString() --

	User -- abc()

	Customer -- abc()

	public class Th1 extends JFrame
	{


	}

private members are not inherited.
constructors are not inherited
static members are not inherited

protected members are inherited but they are not accessible in non child classes.
public members are accessible anywhere in the project with objects.

super() 

Day 2: 05/08/2021

Method Overloading

	methods having same name with different signatures (arg list and sequence)
	in the same class or in the child class.
	

polymorphism - many forms
	1. compile time eg: method overloading - static polymorphism

Overriding 
1. Only in the child class.
2.  same prototype - return type + method name+ signature
3.  cannot be Restrictive 
	public -- public
	protected -- public, protected
	default -- public in the same package

4.  Default methods cannot be OR in a different package
5. Static methods do not participate in OR.


		class Payment{
		public void makePayment(){ }

		}



8.	An Online Store has offers for different types of users. User can be a registered customer, Employee of the Store or a Student.
a.	giveOffers() is a common functionality that gives 10% discount to all Customers , 100 reward points to Employees and 20% discount to all Students.
b.	User has name. Customer has Email.Employee has empCode  and Student has regNo.

c.	Create a Utility Class that calls giveOffers based on the type of User and also prints all the details of User.


	public static void testOffers(User user)
	{
		user.giveOffers(); // runtime
	}

Dynamic binding / late binding / runtime polymorhism

abstract classes
1. 1 or more abstract methods ( declaration) with no implementation.
2. Cannot be instantiated

	User user = new User(); //error
3. Used for Dynamic Binding.
4. Extendibility
5. enforce overriding
6 cannot be final

final -- final double PI=3.14;

class A{
	public final void m1() // prevents Overriding
	{


	}
}

public final class B // prevents extension
{

}

	a-> b

	a->b->c

	a
 b		c

	a   b
	  c	

	Airplane - flies()
	MusicPlayer -- playsMusic()
	Bird  -- chirps()

interface Airplane
{
	public void flies(); // abstract , public by default
}
	

class Person implements Airplane
{

}

Interface -- .class
1. cannot instantiated.
2. dynamic binding
3. has abstract methods by default
4. methods cannot be final
5. only public methods

public abstract class Ab extends JApplet implements Runnable,Cloneable,Serializable
{

}

interface I1
{

}
interface I2
{
}

interface I3 extends I1,I2
{

}

PaymentInterface -- makePayment(double amount)

CashPayment , CreditCardPayment

Client



	Operator -- operate(int a,int b)
Data types -- primitive types (int,byte,short,long,double,float,char,boolean)
	      reference types -- class , interface, array in generics

	Wrapper Classes -- reference types for every primitive type

	Integer ,Byte,Short,Long,Float,Double,Character,Boolean

			Object

			Number

	Integer Byte Short Long Float Double 

char ch ='a';
	if(Character.isLetter(ch)) 

Product - code, desc,price ,stock

	String , StringBuffer, StringBuilder

	Date, Calendar,Random,Math
javadoc

int a = new int[5];
....
[3,4,5,0,0]

create a class ProductStore that has an array of Product.
	a) print all the products in the store
	b) Search for a product based on product code.
	c) add a product 

public class ProductStore
{
	private final int SIZE = 5;
	private Product products = new Product[SIZE];
	int count=0;

	public void addProduct(int code,String desc,double price,long stock)
	{
		if(count < SIZE){
		Product p= new Product(code,desc,price,stock);
		products[count++]=p;
		}


	}

	

}

Day 3: Exception handling.
	Collections API

	Unchecked -- ArrayIndex...,NullPointer....,ArithemticEx... ClassCastExceptionetc.
	Checked -- IOException,SQLException,SocketException,ClassNotFoundException

	int arr[] = new int[3];

	arr[3] = 10; 	  // 0 ,1,2

	public static void m1(String s1)
	{
		//print s1.length(); //NullPointer..

	}

	String s1;
	m1(s1)

	int z= x/y; //ArithmeticException..

	try,catch,finally,throws,throw

	try - catch (n)
	try - catch - finally
	try - finally

	int a[]=new int[5];//[4,7,8,0,5]

	a[4] =10 ;

1.  fixed size
2. shifting operations
3. Not be optimized

	Collections -- API - java.util

	group of data -- aggregation

bank -- group of accounts

		Collection (I)	- add(), remove() etc..		

	List (I)		 	Set (I)

	1. duplicates		 	no duplicates
	2. ordered			 no order
	    [4,2,3,8]	
	3. indexed		 	no index

	ArrayList,LinkedList,Vector      HashSet,LinkedHashSet

					SortedSet (I) 
				 	sorted order

					TreeSet


1. Create a ProductStore that has a List of Product with following functionalities.

	a) add a product
	b) Delete a product based on code
	c) Search a product based on code
	d) add new stock based on code
	e) get the list of products based on a pattern of desc

Exception in thread "main" java.lang.ClassCastException: class com.training.treeset.Book cannot be cast to class java.lang.Comparable (com.training.treeset.Book is in unnamed module of loader 'app'; java.lang.Comparable is in module java.base of loader 'bootstrap')
	at java.base/java.util.TreeMap.compare(TreeMap.java:1291)
	at java.base/java.util.TreeMap.put(TreeMap.java:536)
	at java.base/java.util.TreeSet.add(TreeSet.java:255)
	at com.training.treeset.TreeSetDemo.main(TreeSetDemo.java:16)

instanceof Comparable

				Map<K,V>   O(1)

			HashMap, HashTable,LinkedHashMap

Map of username,password

	1. no order 
	2. keys are unique

	SortedMap(I) --> TreeMap based on keys
	
































